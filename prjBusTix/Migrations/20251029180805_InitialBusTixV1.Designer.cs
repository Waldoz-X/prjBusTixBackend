// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using prjBusTix.Data;

#nullable disable

namespace prjBusTix.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029180805_InitialBusTixV1")]
    partial class InitialBusTixV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("prjBusTix.Model.AuditoriaCambio", b =>
                {
                    b.Property<long>("AuditoriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditoriaID"));

                    b.Property<DateTime>("FechaHoraCambio")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistroID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TablaAfectada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoOperacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsuarioID")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ValoresAnteriores")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValoresNuevos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditoriaID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("TablaAfectada", "FechaHoraCambio")
                        .IsDescending();

                    b.HasIndex("TablaAfectada", "RegistroID", "FechaHoraCambio")
                        .IsDescending();

                    b.ToTable("AuditoriaCambios");
                });

            modelBuilder.Entity("prjBusTix.Model.Boleto", b =>
                {
                    b.Property<int>("BoletoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoletoID"));

                    b.Property<decimal>("CargoServicio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ClienteID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoBoleto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodigoQR")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CuponAplicadoID")
                        .HasColumnType("int");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("EmailPasajero")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaValidacion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NombrePasajero")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumeroAsiento")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ParadaAbordajeID")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioBase")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TelefonoPasajero")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ValidadoPor")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("BoletoID");

                    b.HasIndex("CodigoBoleto")
                        .IsUnique();

                    b.HasIndex("CodigoQR")
                        .IsUnique();

                    b.HasIndex("CuponAplicadoID");

                    b.HasIndex("Estatus");

                    b.HasIndex("ParadaAbordajeID");

                    b.HasIndex("ValidadoPor");

                    b.HasIndex("ViajeID");

                    b.HasIndex("ClienteID", "FechaCompra");

                    b.ToTable("Boletos");
                });

            modelBuilder.Entity("prjBusTix.Model.ClApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("NotificacionesEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificacionesPush")
                        .HasColumnType("bit");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroEmpleado")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlFotoPerfil")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Estatus");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("prjBusTix.Model.Cupon", b =>
                {
                    b.Property<int>("CuponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuponID"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipoDescuento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UsosMaximos")
                        .HasColumnType("int");

                    b.Property<int>("UsosRealizados")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorDescuento")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CuponID");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("Cupones");
                });

            modelBuilder.Entity("prjBusTix.Model.DispositivoUsuario", b =>
                {
                    b.Property<int>("DispositivoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispositivoID"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plataforma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoDispositivo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TokenPush")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DispositivoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("DispositivosUsuario");
                });

            modelBuilder.Entity("prjBusTix.Model.EstatusGeneral", b =>
                {
                    b.Property<int>("Id_Estatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Estatus"));

                    b.Property<string>("Categoria")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id_Estatus");

                    b.HasIndex("Categoria");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("Estatus_General");

                    b.HasData(
                        new
                        {
                            Id_Estatus = 1,
                            Categoria = "Usuario",
                            Codigo = "USR_ACTIVO",
                            Descripcion = "Usuario activo en el sistema",
                            EsActivo = true,
                            Nombre = "Activo",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 2,
                            Categoria = "Usuario",
                            Codigo = "USR_INACTIVO",
                            Descripcion = "Usuario inactivo temporalmente",
                            EsActivo = true,
                            Nombre = "Inactivo",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 3,
                            Categoria = "Usuario",
                            Codigo = "USR_BLOQUEADO",
                            Descripcion = "Usuario bloqueado por seguridad",
                            EsActivo = true,
                            Nombre = "Bloqueado",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 4,
                            Categoria = "Viaje",
                            Codigo = "VJE_BORRADOR",
                            Descripcion = "Viaje en proceso de creación",
                            EsActivo = true,
                            Nombre = "Borrador",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 5,
                            Categoria = "Viaje",
                            Codigo = "VJE_PROGRAMADO",
                            Descripcion = "Viaje confirmado y programado",
                            EsActivo = true,
                            Nombre = "Programado",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 6,
                            Categoria = "Viaje",
                            Codigo = "VJE_EN_CURSO",
                            Descripcion = "Viaje en ejecución",
                            EsActivo = true,
                            Nombre = "En Curso",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 7,
                            Categoria = "Viaje",
                            Codigo = "VJE_FINALIZADO",
                            Descripcion = "Viaje completado exitosamente",
                            EsActivo = true,
                            Nombre = "Finalizado",
                            Orden = 4
                        },
                        new
                        {
                            Id_Estatus = 8,
                            Categoria = "Viaje",
                            Codigo = "VJE_CANCELADO",
                            Descripcion = "Viaje cancelado",
                            EsActivo = true,
                            Nombre = "Cancelado",
                            Orden = 5
                        },
                        new
                        {
                            Id_Estatus = 9,
                            Categoria = "Boleto",
                            Codigo = "BOL_PENDIENTE",
                            Descripcion = "Boleto reservado pendiente de pago",
                            EsActivo = true,
                            Nombre = "Pendiente",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 10,
                            Categoria = "Boleto",
                            Codigo = "BOL_PAGADO",
                            Descripcion = "Boleto pagado",
                            EsActivo = true,
                            Nombre = "Pagado",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 11,
                            Categoria = "Boleto",
                            Codigo = "BOL_VALIDADO",
                            Descripcion = "Boleto validado para abordaje",
                            EsActivo = true,
                            Nombre = "Validado",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 12,
                            Categoria = "Boleto",
                            Codigo = "BOL_USADO",
                            Descripcion = "Boleto usado (pasajero abordó)",
                            EsActivo = true,
                            Nombre = "Usado",
                            Orden = 4
                        },
                        new
                        {
                            Id_Estatus = 13,
                            Categoria = "Boleto",
                            Codigo = "BOL_CANCELADO",
                            Descripcion = "Boleto cancelado",
                            EsActivo = true,
                            Nombre = "Cancelado",
                            Orden = 5
                        },
                        new
                        {
                            Id_Estatus = 14,
                            Categoria = "Pago",
                            Codigo = "PAG_PENDIENTE",
                            Descripcion = "Pago pendiente de procesar",
                            EsActivo = true,
                            Nombre = "Pendiente",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 15,
                            Categoria = "Pago",
                            Codigo = "PAG_CAPTURADO",
                            Descripcion = "Pago procesado exitosamente",
                            EsActivo = true,
                            Nombre = "Capturado",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 16,
                            Categoria = "Pago",
                            Codigo = "PAG_RECHAZADO",
                            Descripcion = "Pago rechazado por pasarela",
                            EsActivo = true,
                            Nombre = "Rechazado",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 17,
                            Categoria = "Incidencia",
                            Codigo = "INC_ABIERTA",
                            Descripcion = "Incidencia reportada",
                            EsActivo = true,
                            Nombre = "Abierta",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 18,
                            Categoria = "Incidencia",
                            Codigo = "INC_EN_PROCESO",
                            Descripcion = "Incidencia en atención",
                            EsActivo = true,
                            Nombre = "En Proceso",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 19,
                            Categoria = "Incidencia",
                            Codigo = "INC_RESUELTA",
                            Descripcion = "Incidencia resuelta",
                            EsActivo = true,
                            Nombre = "Resuelta",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 20,
                            Categoria = "Incidencia",
                            Codigo = "INC_CERRADA",
                            Descripcion = "Incidencia cerrada",
                            EsActivo = true,
                            Nombre = "Cerrada",
                            Orden = 4
                        },
                        new
                        {
                            Id_Estatus = 21,
                            Categoria = "Validacion",
                            Codigo = "ABD_PENDIENTE",
                            Descripcion = "Pasajero pendiente de abordar",
                            EsActivo = true,
                            Nombre = "Pendiente",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 22,
                            Categoria = "Validacion",
                            Codigo = "ABD_ABORDADO",
                            Descripcion = "Pasajero abordó la unidad",
                            EsActivo = true,
                            Nombre = "Abordado",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 23,
                            Categoria = "Validacion",
                            Codigo = "ABD_NO_PRESENTO",
                            Descripcion = "Pasajero no se presentó",
                            EsActivo = true,
                            Nombre = "No Presentó",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 24,
                            Categoria = "Unidad",
                            Codigo = "UNI_DISPONIBLE",
                            Descripcion = "Unidad disponible para asignar",
                            EsActivo = true,
                            Nombre = "Disponible",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 25,
                            Categoria = "Unidad",
                            Codigo = "UNI_EN_SERVICIO",
                            Descripcion = "Unidad en servicio activo",
                            EsActivo = true,
                            Nombre = "En Servicio",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 26,
                            Categoria = "Unidad",
                            Codigo = "UNI_MANTENIMIENTO",
                            Descripcion = "Unidad en mantenimiento",
                            EsActivo = true,
                            Nombre = "Mantenimiento",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 27,
                            Categoria = "Evento",
                            Codigo = "EVT_PROGRAMADO",
                            Descripcion = "Evento programado",
                            EsActivo = true,
                            Nombre = "Programado",
                            Orden = 1
                        },
                        new
                        {
                            Id_Estatus = 28,
                            Categoria = "Evento",
                            Codigo = "EVT_EN_CURSO",
                            Descripcion = "Evento en desarrollo",
                            EsActivo = true,
                            Nombre = "En Curso",
                            Orden = 2
                        },
                        new
                        {
                            Id_Estatus = 29,
                            Categoria = "Evento",
                            Codigo = "EVT_FINALIZADO",
                            Descripcion = "Evento finalizado",
                            EsActivo = true,
                            Nombre = "Finalizado",
                            Orden = 3
                        },
                        new
                        {
                            Id_Estatus = 30,
                            Categoria = "Evento",
                            Codigo = "EVT_CANCELADO",
                            Descripcion = "Evento cancelado",
                            EsActivo = true,
                            Nombre = "Cancelado",
                            Orden = 4
                        });
                });

            modelBuilder.Entity("prjBusTix.Model.Evento", b =>
                {
                    b.Property<int>("EventoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventoID"));

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreadoPor")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Estado")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Recinto")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TipoEvento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("UbicacionLat")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("UbicacionLong")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("UrlImagen")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("EventoID");

                    b.HasIndex("Ciudad");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("Estatus");

                    b.HasIndex("Fecha", "Estatus");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("prjBusTix.Model.Incidencia", b =>
                {
                    b.Property<int>("IncidenciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidenciaID"));

                    b.Property<string>("AsignadoA")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoIncidencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaReporte")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaResolucion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReportadoPor")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TipoIncidenciaID")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.Property<int?>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("IncidenciaID");

                    b.HasIndex("AsignadoA");

                    b.HasIndex("CodigoIncidencia")
                        .IsUnique();

                    b.HasIndex("Estatus");

                    b.HasIndex("ReportadoPor");

                    b.HasIndex("TipoIncidenciaID");

                    b.HasIndex("UnidadID");

                    b.HasIndex("ViajeID");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("prjBusTix.Model.ManifiestoPasajero", b =>
                {
                    b.Property<int>("ManifiestoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManifiestoID"));

                    b.Property<int>("BoletoID")
                        .HasColumnType("int");

                    b.Property<int>("EstatusAbordaje")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAbordaje")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaValidacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FueValidado")
                        .HasColumnType("bit");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumeroAsiento")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ParadaAbordajeID")
                        .HasColumnType("int");

                    b.Property<string>("ValidadoPor")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("ManifiestoID");

                    b.HasIndex("BoletoID")
                        .IsUnique();

                    b.HasIndex("EstatusAbordaje");

                    b.HasIndex("ParadaAbordajeID");

                    b.HasIndex("ValidadoPor");

                    b.HasIndex("ViajeID");

                    b.ToTable("ManifiestoPasajeros");
                });

            modelBuilder.Entity("prjBusTix.Model.Notificacion", b =>
                {
                    b.Property<int>("NotificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificacionID"));

                    b.Property<int?>("BoletoID")
                        .HasColumnType("int");

                    b.Property<bool>("EnviarEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("EnviarPush")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaLectura")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FueEnviada")
                        .HasColumnType("bit");

                    b.Property<bool>("FueLeida")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoNotificacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("NotificacionID");

                    b.HasIndex("BoletoID");

                    b.HasIndex("ViajeID");

                    b.HasIndex("UsuarioID", "FechaCreacion")
                        .IsDescending();

                    b.HasIndex("UsuarioID", "FueLeida")
                        .HasFilter("[FueLeida] = 0");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("prjBusTix.Model.Pago", b =>
                {
                    b.Property<int>("PagoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PagoID"));

                    b.Property<string>("CodigoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransaccionID")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UsuarioID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PagoID");

                    b.HasIndex("CodigoPago")
                        .IsUnique();

                    b.HasIndex("Estatus");

                    b.HasIndex("FechaPago")
                        .IsDescending();

                    b.HasIndex("UsuarioID");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("prjBusTix.Model.PagoBoleto", b =>
                {
                    b.Property<int>("PagoBoletoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PagoBoletoID"));

                    b.Property<int>("BoletoID")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoAsignado")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PagoID")
                        .HasColumnType("int");

                    b.HasKey("PagoBoletoID");

                    b.HasIndex("BoletoID");

                    b.HasIndex("PagoID");

                    b.HasIndex("PagoID", "BoletoID")
                        .IsUnique();

                    b.ToTable("PagosBoletos");
                });

            modelBuilder.Entity("prjBusTix.Model.ParadaViaje", b =>
                {
                    b.Property<int>("ParadaViajeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParadaViajeID"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("EsActiva")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HoraEstimadaLlegada")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitud")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("Longitud")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("NombreParada")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrdenParada")
                        .HasColumnType("int");

                    b.Property<int?>("PlantillaParadaID")
                        .HasColumnType("int");

                    b.Property<int>("TiempoEsperaMinutos")
                        .HasColumnType("int");

                    b.Property<int>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("ParadaViajeID");

                    b.HasIndex("PlantillaParadaID");

                    b.HasIndex("ViajeID", "OrdenParada");

                    b.ToTable("ParadasViaje");
                });

            modelBuilder.Entity("prjBusTix.Model.PlantillaParada", b =>
                {
                    b.Property<int>("ParadaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParadaID"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("EsActiva")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitud")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("Longitud")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("NombreParada")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrdenParada")
                        .HasColumnType("int");

                    b.Property<int>("PlantillaRutaID")
                        .HasColumnType("int");

                    b.Property<int>("TiempoEsperaMinutos")
                        .HasColumnType("int");

                    b.HasKey("ParadaID");

                    b.HasIndex("PlantillaRutaID", "OrdenParada");

                    b.ToTable("PlantillasParadas");
                });

            modelBuilder.Entity("prjBusTix.Model.PlantillaRuta", b =>
                {
                    b.Property<int>("RutaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RutaID"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<string>("CiudadDestino")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CiudadOrigen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoRuta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreadoPor")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("DistanciaKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreRuta")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("PuntoLlegadaLat")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("PuntoLlegadaLong")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("PuntoLlegadaNombre")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("PuntoPartidaLat")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("PuntoPartidaLong")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("PuntoPartidaNombre")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TiempoEstimadoMinutos")
                        .HasColumnType("int");

                    b.HasKey("RutaID");

                    b.HasIndex("CodigoRuta")
                        .IsUnique();

                    b.HasIndex("CreadoPor");

                    b.HasIndex("CiudadOrigen", "CiudadDestino");

                    b.ToTable("PlantillasRutas");
                });

            modelBuilder.Entity("prjBusTix.Model.RegistroValidacion", b =>
                {
                    b.Property<int>("ValidacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidacionID"));

                    b.Property<int>("BoletoID")
                        .HasColumnType("int");

                    b.Property<string>("CodigoQREscaneado")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaHoraValidacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaSincronizacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ModoOffline")
                        .HasColumnType("bit");

                    b.Property<string>("ResultadoValidacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ValidadoPor")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("ValidacionID");

                    b.HasIndex("BoletoID");

                    b.HasIndex("ValidadoPor");

                    b.HasIndex("ViajeID");

                    b.ToTable("RegistroValidacion");
                });

            modelBuilder.Entity("prjBusTix.Model.TipoIncidencia", b =>
                {
                    b.Property<int>("TipoIncidenciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoIncidenciaID"));

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Prioridad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TipoIncidenciaID");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("TipoIncidencia");

                    b.HasData(
                        new
                        {
                            TipoIncidenciaID = 1,
                            Categoria = "Mecanica",
                            Codigo = "INC_MECANICA",
                            EsActivo = true,
                            Nombre = "Falla Mecánica",
                            Prioridad = "Alta"
                        },
                        new
                        {
                            TipoIncidenciaID = 2,
                            Categoria = "Operativa",
                            Codigo = "INC_RETRASO",
                            EsActivo = true,
                            Nombre = "Retraso",
                            Prioridad = "Media"
                        },
                        new
                        {
                            TipoIncidenciaID = 3,
                            Categoria = "Seguridad",
                            Codigo = "INC_ACCIDENTE",
                            EsActivo = true,
                            Nombre = "Accidente",
                            Prioridad = "Critica"
                        },
                        new
                        {
                            TipoIncidenciaID = 4,
                            Categoria = "Cliente",
                            Codigo = "INC_CLIENTE",
                            EsActivo = true,
                            Nombre = "Problema con Cliente",
                            Prioridad = "Media"
                        },
                        new
                        {
                            TipoIncidenciaID = 5,
                            Categoria = "Operativa",
                            Codigo = "INC_TRAFICO",
                            EsActivo = true,
                            Nombre = "Tráfico",
                            Prioridad = "Baja"
                        },
                        new
                        {
                            TipoIncidenciaID = 6,
                            Categoria = "Operativa",
                            Codigo = "INC_CLIMA",
                            EsActivo = true,
                            Nombre = "Condiciones Climáticas",
                            Prioridad = "Media"
                        },
                        new
                        {
                            TipoIncidenciaID = 7,
                            Categoria = "Administrativa",
                            Codigo = "INC_DOCUMENTACION",
                            EsActivo = true,
                            Nombre = "Documentación Faltante",
                            Prioridad = "Baja"
                        },
                        new
                        {
                            TipoIncidenciaID = 8,
                            Categoria = "Servicio",
                            Codigo = "INC_LIMPIEZA",
                            EsActivo = true,
                            Nombre = "Problema de Limpieza",
                            Prioridad = "Baja"
                        });
                });

            modelBuilder.Entity("prjBusTix.Model.Unidad", b =>
                {
                    b.Property<int>("UnidadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnidadID"));

                    b.Property<int?>("Año")
                        .HasColumnType("int");

                    b.Property<int>("CapacidadAsientos")
                        .HasColumnType("int");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroEconomico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Placas")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TieneBaño")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneClimatizacion")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneWifi")
                        .HasColumnType("bit");

                    b.Property<string>("TipoUnidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrlFoto")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("UnidadID");

                    b.HasIndex("Estatus");

                    b.HasIndex("NumeroEconomico")
                        .IsUnique();

                    b.HasIndex("Placas")
                        .IsUnique();

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("prjBusTix.Model.Viaje", b =>
                {
                    b.Property<int>("ViajeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViajeID"));

                    b.Property<int>("AsientosDisponibles")
                        .HasColumnType("int");

                    b.Property<int>("AsientosVendidos")
                        .HasColumnType("int");

                    b.Property<decimal>("CargoServicio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ChoferID")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoViaje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreadoPor")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CupoTotal")
                        .HasColumnType("int");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<int>("EventoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaLlegadaEstimada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlantillaRutaID")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioBase")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TipoViaje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.Property<bool>("VentasAbiertas")
                        .HasColumnType("bit");

                    b.HasKey("ViajeID");

                    b.HasIndex("ChoferID");

                    b.HasIndex("CodigoViaje")
                        .IsUnique();

                    b.HasIndex("CreadoPor");

                    b.HasIndex("Estatus");

                    b.HasIndex("PlantillaRutaID");

                    b.HasIndex("UnidadID");

                    b.HasIndex("EventoID", "FechaSalida");

                    b.HasIndex("FechaSalida", "Estatus");

                    b.ToTable("Viajes");
                });

            modelBuilder.Entity("prjBusTix.Model.ViajeStaff", b =>
                {
                    b.Property<int>("AsignacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsignacionID"));

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("RolEnViaje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StaffID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViajeID")
                        .HasColumnType("int");

                    b.HasKey("AsignacionID");

                    b.HasIndex("StaffID");

                    b.HasIndex("ViajeID");

                    b.ToTable("ViajesStaff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.ClApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prjBusTix.Model.AuditoriaCambio", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Usuario")
                        .WithMany("CambiosAuditados")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("prjBusTix.Model.Boleto", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Cliente")
                        .WithMany("Boletos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Cupon", "CuponAplicado")
                        .WithMany("Boletos")
                        .HasForeignKey("CuponAplicadoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Boletos")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.ParadaViaje", "ParadaAbordaje")
                        .WithMany("BoletosAbordaje")
                        .HasForeignKey("ParadaAbordajeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Validador")
                        .WithMany("BoletosValidados")
                        .HasForeignKey("ValidadoPor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("Boletos")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("CuponAplicado");

                    b.Navigation("EstatusNavigation");

                    b.Navigation("ParadaAbordaje");

                    b.Navigation("Validador");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.ClApplicationUser", b =>
                {
                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EstatusNavigation");
                });

            modelBuilder.Entity("prjBusTix.Model.DispositivoUsuario", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Usuario")
                        .WithMany("Dispositivos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("prjBusTix.Model.Evento", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Creador")
                        .WithMany("EventosCreados")
                        .HasForeignKey("CreadoPor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Eventos")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creador");

                    b.Navigation("EstatusNavigation");
                });

            modelBuilder.Entity("prjBusTix.Model.Incidencia", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Asignado")
                        .WithMany("IncidenciasAsignadas")
                        .HasForeignKey("AsignadoA")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Incidencias")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Reportador")
                        .WithMany("IncidenciasReportadas")
                        .HasForeignKey("ReportadoPor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.TipoIncidencia", "TipoIncidencia")
                        .WithMany("Incidencias")
                        .HasForeignKey("TipoIncidenciaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Unidad", "Unidad")
                        .WithMany("Incidencias")
                        .HasForeignKey("UnidadID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("Incidencias")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Asignado");

                    b.Navigation("EstatusNavigation");

                    b.Navigation("Reportador");

                    b.Navigation("TipoIncidencia");

                    b.Navigation("Unidad");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.ManifiestoPasajero", b =>
                {
                    b.HasOne("prjBusTix.Model.Boleto", "Boleto")
                        .WithOne("ManifiestoPasajero")
                        .HasForeignKey("prjBusTix.Model.ManifiestoPasajero", "BoletoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusAbordajeNavigation")
                        .WithMany("ManifiestoPasajeros")
                        .HasForeignKey("EstatusAbordaje")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.ParadaViaje", "ParadaAbordaje")
                        .WithMany("ManifiestoPasajeros")
                        .HasForeignKey("ParadaAbordajeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Validador")
                        .WithMany("ManifiestosValidados")
                        .HasForeignKey("ValidadoPor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("ManifiestoPasajeros")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boleto");

                    b.Navigation("EstatusAbordajeNavigation");

                    b.Navigation("ParadaAbordaje");

                    b.Navigation("Validador");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.Notificacion", b =>
                {
                    b.HasOne("prjBusTix.Model.Boleto", "Boleto")
                        .WithMany("Notificaciones")
                        .HasForeignKey("BoletoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("Notificaciones")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Boleto");

                    b.Navigation("Usuario");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.Pago", b =>
                {
                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Usuario")
                        .WithMany("Pagos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EstatusNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("prjBusTix.Model.PagoBoleto", b =>
                {
                    b.HasOne("prjBusTix.Model.Boleto", "Boleto")
                        .WithMany("PagosBoletos")
                        .HasForeignKey("BoletoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Pago", "Pago")
                        .WithMany("PagosBoletos")
                        .HasForeignKey("PagoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boleto");

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("prjBusTix.Model.ParadaViaje", b =>
                {
                    b.HasOne("prjBusTix.Model.PlantillaParada", "PlantillaParada")
                        .WithMany("ParadasViaje")
                        .HasForeignKey("PlantillaParadaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("Paradas")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantillaParada");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.PlantillaParada", b =>
                {
                    b.HasOne("prjBusTix.Model.PlantillaRuta", "PlantillaRuta")
                        .WithMany("Paradas")
                        .HasForeignKey("PlantillaRutaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantillaRuta");
                });

            modelBuilder.Entity("prjBusTix.Model.PlantillaRuta", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Creador")
                        .WithMany("PlantillasRutasCreadas")
                        .HasForeignKey("CreadoPor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creador");
                });

            modelBuilder.Entity("prjBusTix.Model.RegistroValidacion", b =>
                {
                    b.HasOne("prjBusTix.Model.Boleto", "Boleto")
                        .WithMany("RegistrosValidacion")
                        .HasForeignKey("BoletoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Validador")
                        .WithMany("Validaciones")
                        .HasForeignKey("ValidadoPor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("RegistrosValidacion")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boleto");

                    b.Navigation("Validador");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.Unidad", b =>
                {
                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Unidades")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EstatusNavigation");
                });

            modelBuilder.Entity("prjBusTix.Model.Viaje", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Chofer")
                        .WithMany("ViajesComoChofer")
                        .HasForeignKey("ChoferID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Creador")
                        .WithMany("ViajesCreados")
                        .HasForeignKey("CreadoPor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("prjBusTix.Model.EstatusGeneral", "EstatusNavigation")
                        .WithMany("Viajes")
                        .HasForeignKey("Estatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Evento", "Evento")
                        .WithMany("Viajes")
                        .HasForeignKey("EventoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.PlantillaRuta", "PlantillaRuta")
                        .WithMany("Viajes")
                        .HasForeignKey("PlantillaRutaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Unidad", "Unidad")
                        .WithMany("Viajes")
                        .HasForeignKey("UnidadID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chofer");

                    b.Navigation("Creador");

                    b.Navigation("EstatusNavigation");

                    b.Navigation("Evento");

                    b.Navigation("PlantillaRuta");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("prjBusTix.Model.ViajeStaff", b =>
                {
                    b.HasOne("prjBusTix.Model.ClApplicationUser", "Staff")
                        .WithMany("AsignacionesStaff")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("prjBusTix.Model.Viaje", "Viaje")
                        .WithMany("Staff")
                        .HasForeignKey("ViajeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("prjBusTix.Model.Boleto", b =>
                {
                    b.Navigation("ManifiestoPasajero");

                    b.Navigation("Notificaciones");

                    b.Navigation("PagosBoletos");

                    b.Navigation("RegistrosValidacion");
                });

            modelBuilder.Entity("prjBusTix.Model.ClApplicationUser", b =>
                {
                    b.Navigation("AsignacionesStaff");

                    b.Navigation("Boletos");

                    b.Navigation("BoletosValidados");

                    b.Navigation("CambiosAuditados");

                    b.Navigation("Dispositivos");

                    b.Navigation("EventosCreados");

                    b.Navigation("IncidenciasAsignadas");

                    b.Navigation("IncidenciasReportadas");

                    b.Navigation("ManifiestosValidados");

                    b.Navigation("Notificaciones");

                    b.Navigation("Pagos");

                    b.Navigation("PlantillasRutasCreadas");

                    b.Navigation("Validaciones");

                    b.Navigation("ViajesComoChofer");

                    b.Navigation("ViajesCreados");
                });

            modelBuilder.Entity("prjBusTix.Model.Cupon", b =>
                {
                    b.Navigation("Boletos");
                });

            modelBuilder.Entity("prjBusTix.Model.EstatusGeneral", b =>
                {
                    b.Navigation("Boletos");

                    b.Navigation("Eventos");

                    b.Navigation("Incidencias");

                    b.Navigation("ManifiestoPasajeros");

                    b.Navigation("Pagos");

                    b.Navigation("Unidades");

                    b.Navigation("Usuarios");

                    b.Navigation("Viajes");
                });

            modelBuilder.Entity("prjBusTix.Model.Evento", b =>
                {
                    b.Navigation("Viajes");
                });

            modelBuilder.Entity("prjBusTix.Model.Pago", b =>
                {
                    b.Navigation("PagosBoletos");
                });

            modelBuilder.Entity("prjBusTix.Model.ParadaViaje", b =>
                {
                    b.Navigation("BoletosAbordaje");

                    b.Navigation("ManifiestoPasajeros");
                });

            modelBuilder.Entity("prjBusTix.Model.PlantillaParada", b =>
                {
                    b.Navigation("ParadasViaje");
                });

            modelBuilder.Entity("prjBusTix.Model.PlantillaRuta", b =>
                {
                    b.Navigation("Paradas");

                    b.Navigation("Viajes");
                });

            modelBuilder.Entity("prjBusTix.Model.TipoIncidencia", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("prjBusTix.Model.Unidad", b =>
                {
                    b.Navigation("Incidencias");

                    b.Navigation("Viajes");
                });

            modelBuilder.Entity("prjBusTix.Model.Viaje", b =>
                {
                    b.Navigation("Boletos");

                    b.Navigation("Incidencias");

                    b.Navigation("ManifiestoPasajeros");

                    b.Navigation("Notificaciones");

                    b.Navigation("Paradas");

                    b.Navigation("RegistrosValidacion");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
